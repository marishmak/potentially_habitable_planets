{"version":3,"sources":["script.js"],"names":["document","addEventListener","script","createElement","src","onload","initApp","head","appendChild","planetsData","fetch","then","response","json","data","initPlanetSelect","createRadiusChart","createFluxTempChart","getElementById","selected","getSelectedPlanets","length","createComparisonChart","alert","error","console","innerHTML","planets","select","forEach","planet","option","value","Object","textContent","selectedOptions","Array","from","map","opt","ctx","getContext","sortedPlanets","sort","a","b","Chart","type","labels","p","datasets","label","backgroundColor","getColorForStarType","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","title","display","text","font","size","legend","tooltip","callbacks","parsed","y","scales","beginAtZero","ticks","x","callback","getLabelForValue","substring","barPercentage","categoryPercentage","r","Math","sqrt","name","Note","includes","raw","selectedPlanetNames","window","comparisonChart","destroy","selectedPlanets","filter","colors","index","pointBackgroundColor","pointRadius","pointHoverRadius","position","padding","context","dataset","angleLines","suggestedMin","elements","line","tension","alpha","key"],"mappings":"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","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\r\n    const script = document.createElement('script');\r\n    script.src = 'https://cdn.jsdelivr.net/npm/chart.js';\r\n    script.onload = function() {\r\n        initApp();\r\n    };\r\n    document.head.appendChild(script);\r\n});\r\n\r\nlet planetsData = []; \r\n\r\n\r\nfunction initApp() {\r\n    fetch('/api/planets')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            planetsData = data; \r\n            initPlanetSelect(data);\r\n            createRadiusChart(data);\r\n            createFluxTempChart(data);\r\n            \r\n            document.getElementById('compare-btn').addEventListener('click', function() {\r\n                const selected = getSelectedPlanets();\r\n                if (selected.length > 0) {\r\n                    createComparisonChart(selected);\r\n                } else {\r\n                    alert('Please select at least one planet');\r\n                }\r\n            });\r\n        })\r\n        .catch(error => {\r\n            console.error('Error loading data:', error);\r\n            document.getElementById('radius-chart').innerHTML = \r\n                '<p class=\"error\">Error loading planet data</p>';\r\n        });\r\n}\r\n\r\nfunction initPlanetSelect(planets) {\r\n    const select = document.getElementById('planet-select');\r\n    planets.forEach(planet => {\r\n        const option = document.createElement('option');\r\n        option.value = planet.Object;\r\n        option.textContent = `${planet.Object} (${planet['Star type']})`;\r\n        select.appendChild(option);\r\n    });\r\n}\r\n\r\nfunction getSelectedPlanets() {\r\n    const selectedOptions = Array.from(document.getElementById('planet-select').selectedOptions);\r\n    return selectedOptions.map(opt => opt.value);\r\n}\r\n\r\nfunction createRadiusChart(planets) {\r\n    const ctx = document.getElementById('radius-chart').getContext('2d');\r\n    \r\n    const sortedPlanets = [...planets].sort((a, b) => b['Radius (R⊕)'] - a['Radius (R⊕)']);\r\n    \r\n    new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n            labels: sortedPlanets.map(p => p.Object),\r\n            datasets: [{\r\n                label: 'Radius (Earth Radii)',\r\n                data: sortedPlanets.map(p => p['Radius (R⊕)']),\r\n                backgroundColor: sortedPlanets.map(p => getColorForStarType(p['Star type'])),\r\n                borderColor: sortedPlanets.map(p => getColorForStarType(p['Star type'], 0.8)),\r\n                borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Radius of Exoplanets (Earth Radii)',\r\n                    font: { size: 16 }\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: ctx => `${ctx.parsed.y} R⊕ (${ctx.label})`\r\n                    }\r\n                }\r\n            },\r\n            scales: {\r\n                y: {\r\n                    beginAtZero: true,\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Radius (Earth Radii)',\r\n                        font: { size: 14 }\r\n                    },\r\n                    ticks: {\r\n                        font: { size: 12 }\r\n                    }\r\n                },\r\n                x: {\r\n                    ticks: {\r\n                        font: { size: 10 },\r\n                        callback: function(value) {\r\n                            return this.getLabelForValue(value).length > 15 ? \r\n                                   this.getLabelForValue(value).substring(0, 15) + '...' : \r\n                                   this.getLabelForValue(value);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            barPercentage: 0.8, \r\n            categoryPercentage: 0.9 \r\n        }\r\n    });\r\n}\r\n\r\nfunction createFluxTempChart(planets) {\r\n    const ctx = document.getElementById('flux-chart').getContext('2d');\r\n    \r\n    new Chart(ctx, {\r\n        type: 'scatter',\r\n        data: {\r\n            datasets: [{\r\n                label: 'Exoplanets',\r\n                data: planets.map(p => ({\r\n                    x: p['Teq (K)'],\r\n                    y: p['Flux (F⊕)'],\r\n                    r: Math.sqrt(p['Radius (R⊕)']) * 2,\r\n                    name: p.Object\r\n                })),\r\n                backgroundColor: planets.map(p => \r\n                    p.Note && p.Note.includes('habitable') ? '#4CAF50' : '#2196F3'),\r\n                borderColor: '#fff',\r\n                borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n            responsive: true,\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Flux vs Temperature with Habitability'\r\n                },\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: ctx => `${ctx.raw.name}: ${ctx.raw.y}F⊕, ${ctx.raw.x}K`\r\n                    }\r\n                }\r\n            },\r\n            scales: {\r\n                x: {\r\n                    title: { display: true, text: 'Temperature (K)' }\r\n                },\r\n                y: {\r\n                    type: 'logarithmic',\r\n                    title: { display: true, text: 'Flux (Earth Flux)' }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction createComparisonChart(selectedPlanetNames) {\r\n    const ctx = document.getElementById('comparison-chart');\r\n    \r\n    if (window.comparisonChart) {\r\n        window.comparisonChart.destroy();\r\n    }\r\n\r\n    const selectedPlanets = planetsData.filter(p => \r\n        selectedPlanetNames.includes(p.Object)\r\n    );\r\n\r\n    const colors = [\r\n        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', \r\n        '#9966FF', '#FF9F40', '#8AC24A', '#EA80FC'\r\n    ];\r\n\r\n    const datasets = selectedPlanets.map((planet, index) => ({\r\n        label: planet.Object,\r\n        data: [\r\n            planet['Mass (M⊕)'],\r\n            planet['Radius (R⊕)'],\r\n            planet['Flux (F⊕)'],\r\n            planet['Teq (K)'],\r\n            planet['Distance (ly)']\r\n        ],\r\n        backgroundColor: colors[index % colors.length] + '33', \r\n        borderColor: colors[index % colors.length],\r\n        borderWidth: 2,\r\n        pointBackgroundColor: colors[index % colors.length],\r\n        pointRadius: 4,\r\n        pointHoverRadius: 6\r\n    }));\r\n\r\n    window.comparisonChart = new Chart(ctx, {\r\n        type: 'radar',\r\n        data: {\r\n            labels: [\r\n                'Mass (M⊕)', \r\n                'Radius (R⊕)', \r\n                'Flux (F⊕)', \r\n                'Temperature (K)', \r\n                'Distance (ly)'\r\n            ],\r\n            datasets: datasets\r\n        },\r\n        options: {\r\n            responsive: true,\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Planet Characteristics Comparison',\r\n                    font: { size: 16 }\r\n                },\r\n                legend: {\r\n                    position: 'right',\r\n                    labels: {\r\n                        font: { size: 12 },\r\n                        padding: 20\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: function(context) {\r\n                            return `${context.dataset.label}: ${context.raw}`;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            scales: {\r\n                r: {\r\n                    angleLines: { display: true },\r\n                    suggestedMin: 0,\r\n                    ticks: {\r\n                        font: { size: 11 }\r\n                    }\r\n                }\r\n            },\r\n            elements: {\r\n                line: {\r\n                    tension: 0.1\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction getColorForStarType(type, alpha = 1) {\r\n    const colors = {\r\n        'G': `rgba(255, 206, 86, ${alpha})`,\r\n        'K': `rgba(255, 159, 64, ${alpha})`,\r\n        'M': `rgba(255, 99, 132, ${alpha})`,\r\n        'F': `rgba(54, 162, 235, ${alpha})`,\r\n        'A': `rgba(153, 102, 255, ${alpha})`,\r\n        'B': `rgba(75, 192, 192, ${alpha})`\r\n    };\r\n    \r\n    for (const key in colors) {\r\n        if (type.includes(key)) return colors[key];\r\n    }\r\n    return `rgba(199, 199, 199, ${alpha})`;\r\n}"],"file":"script.dev.js"}