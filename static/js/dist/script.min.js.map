{"version":3,"sources":["script.js"],"names":["document","addEventListener","script","createElement","src","onload","initApp","head","appendChild","planetsData","fetch","response","json","data","initPlanetSelect","createFluxTempChart","getElementById","selected","getSelectedPlanets","length","error","innerHTML","planets","select","forEach","planet","console","Object","option","textContent","concat","selectedOptions","opt","value","createRadiusChart","ctx","getContext","sort","a","b","Chart","type","labels","sortedPlanets","map","p","datasets","backgroundColor","getColorForStarType","borderWidth","responsive","maintainAspectRatio","plugins","title","display","text","font","size","legend","tooltip","callbacks","parsed","y","label","scales","beginAtZero","ticks","x","callback","this","getLabelForValue","substring","barPercentage","categoryPercentage","r","Math","sqrt","name","Note","includes","options","raw","borderColor","selectedPlanetNames","window","comparisonChart","destroy","filter","selectedPlanets","index","colors","createComparisonChart","pointBackgroundColor","padding","context","dataset","angleLines","suggestedMin","position","tension","alpha","arguments","undefined","K","M","F","A","B","key"],"mappings":"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","file":"script.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\r\n    const script = document.createElement('script');\r\n    script.src = 'https://cdn.jsdelivr.net/npm/chart.js';\r\n    script.onload = function() {\r\n        initApp();\r\n    };\r\n    document.head.appendChild(script);\r\n});\r\n\r\nlet planetsData = []; \r\n\r\n\r\nfunction initApp() {\r\n    fetch('/api/planets')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            planetsData = data; \r\n            initPlanetSelect(data);\r\n            createRadiusChart(data);\r\n            createFluxTempChart(data);\r\n            \r\n            document.getElementById('compare-btn').addEventListener('click', function() {\r\n                const selected = getSelectedPlanets();\r\n                if (selected.length > 0) {\r\n                    createComparisonChart(selected);\r\n                } else {\r\n                    alert('Please select at least one planet');\r\n                }\r\n            });\r\n        })\r\n        .catch(error => {\r\n            console.error('Error loading data:', error);\r\n            document.getElementById('radius-chart').innerHTML = \r\n                '<p class=\"error\">Error loading planet data</p>';\r\n        });\r\n}\r\n\r\nfunction initPlanetSelect(planets) {\r\n    const select = document.getElementById('planet-select');\r\n    planets.forEach(planet => {\r\n        const option = document.createElement('option');\r\n        option.value = planet.Object;\r\n        option.textContent = `${planet.Object} (${planet['Star type']})`;\r\n        select.appendChild(option);\r\n    });\r\n}\r\n\r\nfunction getSelectedPlanets() {\r\n    const selectedOptions = Array.from(document.getElementById('planet-select').selectedOptions);\r\n    return selectedOptions.map(opt => opt.value);\r\n}\r\n\r\nfunction createRadiusChart(planets) {\r\n    const ctx = document.getElementById('radius-chart').getContext('2d');\r\n    \r\n    const sortedPlanets = [...planets].sort((a, b) => b['Radius (R⊕)'] - a['Radius (R⊕)']);\r\n    \r\n    new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n            labels: sortedPlanets.map(p => p.Object),\r\n            datasets: [{\r\n                label: 'Radius (Earth Radii)',\r\n                data: sortedPlanets.map(p => p['Radius (R⊕)']),\r\n                backgroundColor: sortedPlanets.map(p => getColorForStarType(p['Star type'])),\r\n                borderColor: sortedPlanets.map(p => getColorForStarType(p['Star type'], 0.8)),\r\n                borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Radius of Exoplanets (Earth Radii)',\r\n                    font: { size: 16 }\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: ctx => `${ctx.parsed.y} R⊕ (${ctx.label})`\r\n                    }\r\n                }\r\n            },\r\n            scales: {\r\n                y: {\r\n                    beginAtZero: true,\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Radius (Earth Radii)',\r\n                        font: { size: 14 }\r\n                    },\r\n                    ticks: {\r\n                        font: { size: 12 }\r\n                    }\r\n                },\r\n                x: {\r\n                    ticks: {\r\n                        font: { size: 10 },\r\n                        callback: function(value) {\r\n                            return this.getLabelForValue(value).length > 15 ? \r\n                                   this.getLabelForValue(value).substring(0, 15) + '...' : \r\n                                   this.getLabelForValue(value);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            barPercentage: 0.8, \r\n            categoryPercentage: 0.9 \r\n        }\r\n    });\r\n}\r\n\r\nfunction createFluxTempChart(planets) {\r\n    const ctx = document.getElementById('flux-chart').getContext('2d');\r\n    \r\n    new Chart(ctx, {\r\n        type: 'scatter',\r\n        data: {\r\n            datasets: [{\r\n                label: 'Exoplanets',\r\n                data: planets.map(p => ({\r\n                    x: p['Teq (K)'],\r\n                    y: p['Flux (F⊕)'],\r\n                    r: Math.sqrt(p['Radius (R⊕)']) * 2,\r\n                    name: p.Object\r\n                })),\r\n                backgroundColor: planets.map(p => \r\n                    p.Note && p.Note.includes('habitable') ? '#4CAF50' : '#2196F3'),\r\n                borderColor: '#fff',\r\n                borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n            responsive: true,\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Flux vs Temperature with Habitability'\r\n                },\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: ctx => `${ctx.raw.name}: ${ctx.raw.y}F⊕, ${ctx.raw.x}K`\r\n                    }\r\n                }\r\n            },\r\n            scales: {\r\n                x: {\r\n                    title: { display: true, text: 'Temperature (K)' }\r\n                },\r\n                y: {\r\n                    type: 'logarithmic',\r\n                    title: { display: true, text: 'Flux (Earth Flux)' }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction createComparisonChart(selectedPlanetNames) {\r\n    const ctx = document.getElementById('comparison-chart');\r\n    \r\n    if (window.comparisonChart) {\r\n        window.comparisonChart.destroy();\r\n    }\r\n\r\n    const selectedPlanets = planetsData.filter(p => \r\n        selectedPlanetNames.includes(p.Object)\r\n    );\r\n\r\n    const colors = [\r\n        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', \r\n        '#9966FF', '#FF9F40', '#8AC24A', '#EA80FC'\r\n    ];\r\n\r\n    const datasets = selectedPlanets.map((planet, index) => ({\r\n        label: planet.Object,\r\n        data: [\r\n            planet['Mass (M⊕)'],\r\n            planet['Radius (R⊕)'],\r\n            planet['Flux (F⊕)'],\r\n            planet['Teq (K)'],\r\n            planet['Distance (ly)']\r\n        ],\r\n        backgroundColor: colors[index % colors.length] + '33', \r\n        borderColor: colors[index % colors.length],\r\n        borderWidth: 2,\r\n        pointBackgroundColor: colors[index % colors.length],\r\n        pointRadius: 4,\r\n        pointHoverRadius: 6\r\n    }));\r\n\r\n    window.comparisonChart = new Chart(ctx, {\r\n        type: 'radar',\r\n        data: {\r\n            labels: [\r\n                'Mass (M⊕)', \r\n                'Radius (R⊕)', \r\n                'Flux (F⊕)', \r\n                'Temperature (K)', \r\n                'Distance (ly)'\r\n            ],\r\n            datasets: datasets\r\n        },\r\n        options: {\r\n            responsive: true,\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Planet Characteristics Comparison',\r\n                    font: { size: 16 }\r\n                },\r\n                legend: {\r\n                    position: 'right',\r\n                    labels: {\r\n                        font: { size: 12 },\r\n                        padding: 20\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: function(context) {\r\n                            return `${context.dataset.label}: ${context.raw}`;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            scales: {\r\n                r: {\r\n                    angleLines: { display: true },\r\n                    suggestedMin: 0,\r\n                    ticks: {\r\n                        font: { size: 11 }\r\n                    }\r\n                }\r\n            },\r\n            elements: {\r\n                line: {\r\n                    tension: 0.1\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction getColorForStarType(type, alpha = 1) {\r\n    const colors = {\r\n        'G': `rgba(255, 206, 86, ${alpha})`,\r\n        'K': `rgba(255, 159, 64, ${alpha})`,\r\n        'M': `rgba(255, 99, 132, ${alpha})`,\r\n        'F': `rgba(54, 162, 235, ${alpha})`,\r\n        'A': `rgba(153, 102, 255, ${alpha})`,\r\n        'B': `rgba(75, 192, 192, ${alpha})`\r\n    };\r\n    \r\n    for (const key in colors) {\r\n        if (type.includes(key)) return colors[key];\r\n    }\r\n    return `rgba(199, 199, 199, ${alpha})`;\r\n}"]}